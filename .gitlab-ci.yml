stages:
  - build
  - image
  - chart

# ------------------------ cast-be
build cast-be:
  stage: build
  image: daystram/go-builder:1.15
  script:
    - cd cast-be
    - go mod tidy
    - go build -a -o app .
  artifacts:
    paths:
      - cast-be/app

image dev cast-be:
  stage: image
  image: docker:19.03.12
  needs: ["build cast-be"]
  environment:
    name: development-be
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:19.03.12-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd cast-be
    - docker build --tag $CI_REGISTRY_IMAGE:be-dev .
    - docker push $CI_REGISTRY_IMAGE:be-dev
  when: manual
  only:
    - branches
  except:
    - master

image prod cast-be:
  stage: image
  image: docker:19.03.12
  needs: ["build cast-be"]
  environment:
    name: production-be
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:19.03.12-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd cast-be
    - docker build -t $CI_REGISTRY_IMAGE:be -t $CI_REGISTRY_IMAGE:be-$CI_COMMIT_TAG .
    - docker push $CI_REGISTRY_IMAGE:be
    - docker push $CI_REGISTRY_IMAGE:be-$CI_COMMIT_TAG
  when: on_success
  only:
    - tags

# ------------------------ cast-is
build cast-is:
  stage: build
  image: daystram/go-builder:1.15
  script:
    - cd cast-is
    - go mod tidy
    - go build -a -o app .
  artifacts:
    paths:
      - cast-is/app

image dev cast-is:
  stage: image
  image: docker:19.03.12
  needs: ["build cast-is"]
  environment:
    name: development-is
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:19.03.12-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd cast-is
    - docker build --tag $CI_REGISTRY_IMAGE:is-dev .
    - docker push $CI_REGISTRY_IMAGE:is-dev
  when: manual
  only:
    - branches
  except:
    - master

image prod cast-is:
  stage: image
  image: docker:19.03.12
  needs: ["build cast-is"]
  environment:
    name: production-is
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:19.03.12-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd cast-is
    - docker build -t $CI_REGISTRY_IMAGE:is -t $CI_REGISTRY_IMAGE:is-$CI_COMMIT_TAG .
    - docker push $CI_REGISTRY_IMAGE:is
    - docker push $CI_REGISTRY_IMAGE:is-$CI_COMMIT_TAG
  when: on_success
  only:
    - tags

# ------------------------ cast-fe
build cast-fe:
  stage: build
  image: node:lts-alpine
  script:
    - cd cast-fe
    - yarn install
    - yarn build
  artifacts:
    paths:
      - cast-fe/dist/

image dev cast-fe:
  stage: image
  image: docker:19.03.12
  needs: ["build cast-fe"]
  environment:
    name: development-fe
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:19.03.12-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd cast-fe
    - cp $FE_ENV_FILE ./.env.production
    - docker build --tag $CI_REGISTRY_IMAGE:fe-dev .
    - docker push $CI_REGISTRY_IMAGE:fe-dev
  when: manual
  only:
    - branches
  except:
    - master

image prod cast-fe:
  stage: image
  image: docker:19.03.12
  needs: ["build cast-fe"]
  environment:
    name: production-fe
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:19.03.12-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd cast-fe
    - cp $FE_ENV_FILE ./.env.production
    - docker build -t $CI_REGISTRY_IMAGE:fe -t $CI_REGISTRY_IMAGE:fe-$CI_COMMIT_TAG .
    - docker push $CI_REGISTRY_IMAGE:fe
    - docker push $CI_REGISTRY_IMAGE:fe-$CI_COMMIT_TAG
  when: on_success
  only:
    - tags

# ------------------------ chart
chart dev cast:
  stage: chart
  image: daystram/k8s-tools:latest
  needs: ["image dev cast-be", "image dev cast-is", "image dev cast-fe"]
  variables:
    APPLICATION_NAME: "cast"
    APPLICATION_VERSION: "v0.0.0-development"
  before_script:
    - git config --global user.name "$BOTDAYSTRAM_NAME"
    - git config --global user.email "$BOTDAYSTRAM_EMAIL"
    - mkdir -p ~/.ssh && eval `ssh-agent -s` && ssh-keyscan github.com >> ~/.ssh/known_hosts
    - cat $BOTDAYSTRAM_KEY_FILE | ssh-add -
    - cat $KUBECONFIG_FILE > $KUBECONFIG && chmod 700 $KUBECONFIG
  script:
    - git clone git@github.com:daystram/helm-charts.git
    - cp -r .daystram helm-charts/docs/
    - cd helm-charts/docs/
    - curl -sfL https://charts.daystram.com/build.sh | sh -s - $APPLICATION_NAME $APPLICATION_VERSION
    - rm -rf .daystram/
    - git add .
    - 'git commit -m "feat: added chart for ${APPLICATION_NAME}@${APPLICATION_VERSION}"'
    - git push
  when: on_success
  only:
    - branches
  except:
    - master

chart prod cast:
  stage: chart
  image: daystram/k8s-tools:latest
  needs: ["image prod cast-be", "image prod cast-is", "image prod cast-fe"]
  variables:
    APPLICATION_NAME: "cast"
    APPLICATION_VERSION: "$CI_COMMIT_TAG"
  before_script:
    - git config --global user.name "$BOTDAYSTRAM_NAME"
    - git config --global user.email "$BOTDAYSTRAM_EMAIL"
    - mkdir -p ~/.ssh && eval `ssh-agent -s` && ssh-keyscan github.com >> ~/.ssh/known_hosts
    - cat $BOTDAYSTRAM_KEY_FILE | ssh-add -
    - cat $KUBECONFIG_FILE > $KUBECONFIG && chmod 700 $KUBECONFIG
  script:
    - git clone git@github.com:daystram/helm-charts.git
    - cp -r .daystram helm-charts/docs/
    - cd helm-charts/docs/
    - curl -sfL https://charts.daystram.com/build.sh | sh -s - $APPLICATION_NAME $APPLICATION_VERSION
    - rm -rf .daystram/
    - git add .
    - 'git commit -m "feat: added chart for ${APPLICATION_NAME}@${APPLICATION_VERSION}"'
    - git push
  when: on_success
  only:
    - tags
