stages:
  - build
  - deploy

variables:
  GOPATH: ${CI_PROJECT_DIR}/go
  GOPROJECT: gitlab.com/daystram/cast

build:backend:
  image: daystram/go-builder:1.13
  stage: build
  script:
    - . scripts/init_backend.sh
    - dep ensure
    - go build
  artifacts:
    name: "$CI_COMMIT_REF_NAME-backend"
    paths:
      - ${GOPATH}/src/${GOPROJECT}/cast-be
      - ${GOPATH}/src/${GOPROJECT}/vendor/
  only:
    changes:
      - cast-be/**/*

build:ingest:
  image: daystram/go-builder:1.13
  stage: build
  script:
    - . scripts/init_ingest.sh
    - dep ensure
    - go build
  artifacts:
    name: "$CI_COMMIT_REF_NAME-ingest"
    paths:
      - ${GOPATH}/src/${GOPROJECT}/cast-is
      - ${GOPATH}/src/${GOPROJECT}/vendor/
  only:
    changes:
      - cast-is/**/*

build:frontend:
  image: node:12.10.0-buster
  stage: build
  script:
    - . scripts/init_frontend.sh
    - yarn install
    - yarn build
  artifacts:
    name: "$CI_COMMIT_REF_NAME-frontend"
    paths:
      - build/
      - cast-fe/node_modules/
  only:
    changes:
      - cast-fe/**/*

deploy_dev:backend:
  image: docker:git
  stage: deploy
  tags:
    - docker
  environment:
    name: dev/$CI_COMMIT_REF_NAME
  dependencies: []
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    SERVICE_NAME: dev-cast-be
  before_script:
    - . scripts/init_deploy.sh
    - echo "$CI_REGISTRY_PASS" | docker login -u $CI_REGISTRY_USER --password-stdin  $CI_REGISTRY
  script:
    - echo $CONFIG_BACKEND | base64 -d > ./cast-be/config/app.conf
    - docker pull $CI_REGISTRY_IMAGE:dev-cast-be || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:dev-cast-be --tag $CI_REGISTRY_IMAGE:dev-cast-be cast-be/
    - docker push $CI_REGISTRY_IMAGE:dev-cast-be
    - ssh $HOST "make update SERVICE=$SERVICE_NAME"
  except:
    refs:
      - master
      - staging
  when: manual

deploy_dev:ingest:
  image: docker:git
  stage: deploy
  tags:
    - docker
  environment:
    name: dev/$CI_COMMIT_REF_NAME
  dependencies: []
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    SERVICE_NAME: dev-cast-is
  before_script:
    - . scripts/init_deploy.sh
    - echo "$CI_REGISTRY_PASS" | docker login -u $CI_REGISTRY_USER --password-stdin  $CI_REGISTRY
  script:
    - echo $CONFIG_INGEST | base64 -d > ./cast-is/config/app.conf
    - docker pull $CI_REGISTRY_IMAGE:dev-cast-is || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:dev-cast-is --tag $CI_REGISTRY_IMAGE/ingest:dev-cast-is cast-is/
    - docker push $CI_REGISTRY_IMAGE:dev-cast-is
    - ssh $HOST "make update SERVICE=$SERVICE_NAME"
  except:
    refs:
      - master
      - staging
  when: manual

deploy_dev:frontend:
  image: docker:git
  stage: deploy
  tags:
    - docker
  environment:
    name: dev/$CI_COMMIT_REF_NAME
  dependencies: []
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    SERVICE_NAME: dev-cast-fe
  before_script:
    - . scripts/init_deploy.sh
    - echo "$CI_REGISTRY_PASS" | docker login -u $CI_REGISTRY_USER --password-stdin  $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:dev-cast-fe || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:dev-cast-fe --tag $CI_REGISTRY_IMAGE:dev-cast-fe cast-fe/
    - docker push $CI_REGISTRY_IMAGE:dev-cast-fe
    - ssh $HOST "make update SERVICE=$SERVICE_NAME"
  except:
    refs:
      - master
      - staging
  when: manual

deploy_prod:backend:
  image: docker:git
  stage: deploy
  tags:
    - docker
  environment:
    name: production
  dependencies: []
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    SERVICE_NAME: prod-cast-be
  before_script:
    - . scripts/init_deploy.sh
    - echo "$CI_REGISTRY_PASS" | docker login -u $CI_REGISTRY_USER --password-stdin  $CI_REGISTRY
  script:
    - echo $CONFIG_BACKEND | base64 -d > ./cast-be/config/app.conf
    - docker pull $CI_REGISTRY_IMAGE:cast-be || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:cast-be --tag $CI_REGISTRY_IMAGE:cast-be cast-be/
    - docker push $CI_REGISTRY_IMAGE:cast-be
    - ssh $HOST "make update SERVICE=$SERVICE_NAME"
  only:
    refs:
      - master
  when: manual

deploy_prod:ingest:
  image: docker:git
  stage: deploy
  tags:
    - docker
  environment:
    name: production
  dependencies: []
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    SERVICE_NAME: prod-cast-is
  before_script:
    - . scripts/init_deploy.sh
    - echo "$CI_REGISTRY_PASS" | docker login -u $CI_REGISTRY_USER --password-stdin  $CI_REGISTRY
  script:
    - echo $CONFIG_INGEST | base64 -d > ./cast-is/config/app.conf
    - docker pull $CI_REGISTRY_IMAGE:cast-is || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:cast-is --tag $CI_REGISTRY_IMAGE:cast-is cast-is/
    - docker push $CI_REGISTRY_IMAGE:cast-is
    - ssh $HOST "make update SERVICE=$SERVICE_NAME"
  only:
    refs:
      - master
  when: manual

deploy_prod:frontend:
  image: docker:git
  stage: deploy
  tags:
    - docker
  environment:
    name: production
  dependencies: []
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    SERVICE_NAME: prod-cast-fe
  before_script:
    - . scripts/init_deploy.sh
    - echo "$CI_REGISTRY_PASS" | docker login -u $CI_REGISTRY_USER --password-stdin  $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:cast-fe || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:cast-fe --tag $CI_REGISTRY_IMAGE:cast-fe cast-fe/
    - docker push $CI_REGISTRY_IMAGE:cast-fe
    - ssh $HOST "make update SERVICE=$SERVICE_NAME"
  only:
    refs:
      - master
  when: manual
