stages:
  - build
  - deploy

# ------------------------ cast-be
build cast-be:
  stage: build
  image: daystram/go-builder:1.15
  script:
    - cd cast-be
    - go mod tidy
    - go build -a -o app .
  artifacts:
    paths:
      - cast-be/app

deploy dev cast-be:
  stage: deploy
  image: docker:19.03.12
  needs: ["build cast-be"]
  environment:
    name: development-be
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:19.03.12-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd cast-be
    - docker build --tag $CI_REGISTRY_IMAGE:be-dev .
    - docker push $CI_REGISTRY_IMAGE:be-dev
  when: manual
  only:
    - branches
  except:
    - master

deploy prod cast-be:
  stage: deploy
  image: docker:19.03.12
  needs: ["build cast-be"]
  environment:
    name: production-be
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:19.03.12-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd cast-be
    - docker build -t $CI_REGISTRY_IMAGE:be -t $CI_REGISTRY_IMAGE:be-$CI_COMMIT_TAG .
    - docker push $CI_REGISTRY_IMAGE:be
    - docker push $CI_REGISTRY_IMAGE:be-$CI_COMMIT_TAG
  when: on_success
  only:
    - tags

# ------------------------ cast-is
build cast-is:
  stage: build
  image: daystram/go-builder:1.15
  script:
    - cd cast-is
    - go mod tidy
    - go build -a -o app .
  artifacts:
    paths:
      - cast-is/app

deploy dev cast-is:
  stage: deploy
  image: docker:19.03.12
  needs: ["build cast-is"]
  environment:
    name: development-is
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:19.03.12-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd cast-is
    - docker build --tag $CI_REGISTRY_IMAGE:is-dev .
    - docker push $CI_REGISTRY_IMAGE:is-dev
  when: manual
  only:
    - branches
  except:
    - master

deploy prod cast-is:
  stage: deploy
  image: docker:19.03.12
  needs: ["build cast-is"]
  environment:
    name: production-is
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:19.03.12-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd cast-is
    - docker build -t $CI_REGISTRY_IMAGE:is -t $CI_REGISTRY_IMAGE:is-$CI_COMMIT_TAG .
    - docker push $CI_REGISTRY_IMAGE:is
    - docker push $CI_REGISTRY_IMAGE:is-$CI_COMMIT_TAG
  when: on_success
  only:
    - tags

# ------------------------ cast-fe
build cast-fe:
  stage: build
  image: node:lts-alpine
  script:
    - cd cast-fe
    - yarn install
    - yarn build
  artifacts:
    paths:
      - cast-fe/dist/

deplpoy dev cast-fe:
  stage: deploy
  image: docker:19.03.12
  needs: ["build cast-fe"]
  environment:
    name: development-fe
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:19.03.12-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd cast-fe
    - cp $VUE_ENV_FILE ./.env.production
    - docker build --tag $CI_REGISTRY_IMAGE:fe-dev .
    - docker push $CI_REGISTRY_IMAGE:fe-dev
  when: manual
  only:
    - branches
  except:
    - master

deploy prod cast-fe:
  stage: deploy
  image: docker:19.03.12
  needs: ["build cast-fe"]
  environment:
    name: production-fe
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:19.03.12-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd cast-fe
    - cp $VUE_ENV_FILE ./.env.production
    - docker build -t $CI_REGISTRY_IMAGE:fe -t $CI_REGISTRY_IMAGE:fe-$CI_COMMIT_TAG .
    - docker push $CI_REGISTRY_IMAGE:fe
    - docker push $CI_REGISTRY_IMAGE:fe-$CI_COMMIT_TAG
  when: on_success
  only:
    - tags
